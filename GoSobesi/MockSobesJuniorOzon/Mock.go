package main

import (
	"fmt"
	"sync"
	"time"
)

//https://www.youtube.com/watch?v=5-rENjTvYeU

func main() {
	//!!!1 –ó–∞–¥–∞—á–∞!!!
	// v := "Hello üìå"
	// //–∏–Ω–¥–µ–∫—Å - i –∏ —Ä—É–Ω—ã - c(–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ string –ø—Ä–∏ –ø–æ–º–æ—â–∏ string(c) )
	// for i, c := range v {
	// 	fmt.Printf("%d of '%s'\n", i, c)
	// }

	// //
	// emoji := []rune("coolüìå")
	// for _, ch := range emoji {
	// 	fmt.Printf("%d of '%s'\n", ch, string(ch))
	// }

	//!!!2 –ó–∞–¥–∞—á–∞ - APPEND –∫–æ–ø–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ!!!
	//arr1 = append(arr2, 9) - –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ arr1, –≤ arr2 –∏ –¥–æ–±–∞–≤–ª—è–µ–º 9.

	// arr1 := []int{1, 2, 3, 4}
	// arr2 := []int{5, 6, 7, 8}
	// arr1 = append(arr2, 9)
	// fmt.Println("ABOBA: ", arr1)

	//s1 := make([]account, 0, 2)
	//s1 = append(s1, account{})  //{acc1}
	//s2 := append(s1, account{}) //{acc1,acc2}
	//
	//acc := &s2[0]
	//
	//acc.value = 100
	//fmt.Println(s1, s2) //s1{acc1=100}___s2{acc1=100,acc2=0}
	//
	//s1 = append(s2, account{}) // s1{acc1=100,acc2=0,acc3=0}–±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω —Å s2, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—Å–∏–ª cap
	//acc.value += 100           // s2{acc1=200,acc2=0}
	//fmt.Println(s1, s2)

	//!!!3 –ó–∞–¥–∞—á–∞
	//a := make([]int32, 0)
	////–ü–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ª–∞–π—Å –∑–Ω–∞—á–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–∏–≤–∞—è len –∏ cap –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
	//a = append(a, []int32{1, 2, 3}...) // len-cap 1-1 -> 2-2 -> 3-4
	//fmt.Println(len(a), cap(a))
	//a = append(a, 4) // 4-4
	//
	//fmt.Println(len(a), cap(a))
	//
	//fmt.Println("–¢–ï–ü–ï–†–¨ 'b' —Å int64")
	//b := make([]int64, 0)
	////–°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ—Ç 3 —ç–ª–µ–º–µ–Ω—Ç–∞. len –∏ cap —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è 3-3
	//b = append(b, []int64{1, 2, 3}...) // len-cap 3-3
	//fmt.Println(len(b), cap(b))
	//b = append(b, 4) // cap - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞. 3-3 -> 4-6
	//
	//fmt.Println(len(b), cap(b))

	//!!!4 –ó–∞–¥–∞—á–∞
	//groceries := map[string]string{
	//	"üìå": "150 —Ä—É–±–ª–µ–π",
	//	"üòÄ": "0 —Ä—É–±–ª–µ–π",
	//	"ü§´": "750 —Ä—É–±–ª–µ–π",
	//}
	//
	//for idx, item := range groceries {
	//	fmt.Println(idx, item)
	//}
	//
	////–°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞–ø—É
	//fmt.Println(groceries)

	//!!!5 –ó–∞–¥–∞—á–∞
	//fiveTask()

	//!!!6 –ó–∞–¥–∞—á–∞
	//sixTask()

	//!!!7 –ó–∞–¥–∞—á–∞
	//sevenTask()

	//!!!8 –ó–∞–¥–∞—á–∞
	mergeChan()
}

// 5 TASK ------------
//type I interface {
//	Foo()
//}
//
//type S struct{}
//
//func (s *S) Foo() {
//	fmt.Println("foo")
//}
//
//func Build() I {
//	//res —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º *S –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å I
//	var res *S
//	return res
//}
//
//func fiveTask() {
//	i := Build()
//	//–í—ã–≤–µ–¥–µ—Ç—Å—è foo, –ø–æ—Ç–æ–º—É —á—Ç–æ i –∏–º–µ–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–µ —Ä–∞–≤–µ–Ω nil
//	if i != nil {
//		i.Foo()
//	} else {
//		fmt.Println("nil")
//	}
//}

// 6 TASK ------------
//type X struct {
//	V int
//}
//
//func (x X) S() {
//	fmt.Println(x.V)
//}

func sixTask() {
	//–ó–¥–µ—Å—å –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø–æ–ø–∞–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ
	//x := X{123}
	//–ï—Å–ª–∏ —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏–ª–æ 456, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é(–ø–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–∞–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ)
	//–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É–∫–∞–∂–µ–º –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	//defer func() {
	//	x.S()
	//}()
	//x.V = 456

	//accum
	a := accum()

	fmt.Println(a(1)) //1
	fmt.Println(a(1)) //2
}

func accum() func(int) int {
	sum := 0
	//–ü–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç —á–∏—Å–ª–æ
	//sum —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
	return func(x int) int {
		sum += x
		return sum
	}
}

// 6 TASK ------------

// 7 TASK ------------

type SafeCounter struct {
	v  map[string]int
	mu sync.Mutex
}

func (c *SafeCounter) Inc(key string) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.v[key]++
}

func (c *SafeCounter) Value(key string) int {
	return c.v[key]
}

func sevenTask() {
	c := SafeCounter{v: make(map[string]int), mu: sync.Mutex{}}
	for i := 0; i < 1000; i++ {
		go c.Inc("somekey")
	}

	time.Sleep(time.Second)
	fmt.Println(c.Value("somekey"))
}

// 7 TASK ------------

// 8 TASK ------------
func mergeChans(chs ...<-chan int) <-chan int {
	wg := &sync.WaitGroup{}
	resChan := make(chan int, 1)

	for _, ch := range chs {
		wg.Add(1)
		go func(ch <-chan int) {
			defer wg.Done()

			for v := range ch {
				resChan <- v
			}
		}(ch)
	}

	go func() {
		wg.Wait()
		close(resChan)
	}()

	return resChan
}

// func mergeChan(cs ...<-chan int) <-chan int {
// 	resChan := make(chan int, 1)

// 	wg := &sync.WaitGroup{}

// 	wg.Add(len(cs))

// 	for _, someChan := range cs {
// 		go func(ch <-chan int) {
// 			defer wg.Done()

// 			for val := range someChan {
// 				resChan <- val
// 			}
// 		}(someChan)
// 	}

// 	go func() {
// 		wg.Wait()
// 		close(resChan)
// 	}()

// 	return resChan
// }

// 8 TASK ------------

//type account struct {
//	value int
//}
