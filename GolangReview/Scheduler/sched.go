package main

import "runtime"

//Планировщик Go использует алгоритм work stealing для балансировки нагрузки между логическими процессорами
//Позволяет запустить произвольное количество горутин на произвольном количестве потоков.

//Планировщик мультиплексирует горутины на потоки ОС в отношении M:N
//В ГО - асинхронно вытесняющий планировщик, с кооперативными элементами

// Планировщик в Golang - это механизм, который отвечает за распределение и выполнение горутин (G)
// на логических процессорах (P),
// которые в свою очередь работают на физических потоках (M) операционной системы.
// G - Горутины - легковесные потоки
// P - (процессы/контекст планирования) Логический процессор представляет собой ресурс, необходимый для выполнения горутин.
// M - Физический поток (операционной системы)

//Основные типы многозадачности что используются в большинстве ОС это "вытесняющая" (все ресурсы делятся между всеми программами одинаково, всем выделяется одинаковое время выполнения)
//и "кооперативная" (программы выполняются столько, сколько им нужно, и сами уступают друг-другу место).

// Вытесняющий планировщик - это такой планировщик, который может прервать выполнение текущей задачи в любой момент и передать управление другой задаче, если он посчитает это необходимым.
// Кооперативный планировщик - это такой планировщик, который не может прервать выполнение текущей задачи, пока она сама не отдаст управление.
func main() {
	//сколько доступно логических процессоров на компьютере
	runtime.GOMAXPROCS(2)
}
